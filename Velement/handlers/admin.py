from aiogram.dispatcher import FSMContext # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.dispatcher.filters.state import State, StatesGroup # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from data_base import sqlite_db # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from keyboards import admin_kb, client_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

admin_ids = []

# –ö–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#@dp.message_handler(commands=['admin'], is_chat_admin=True)
async def get_admins(message: types.Message):
	global admin_ids
	chat_id = message.chat.id
	try:
		admins = await bot.get_chat_administrators(chat_id)
		admin_ids = [admin.user.id for admin in admins]
		await bot.send_message(message.from_user.id, '–ß—Ç–æ –Ω–∞–¥–æ —Ö–æ–∑—è–∏–Ω ?', reply_markup=admin_kb.button_case_newsletter) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
		await message.delete()
        #await message.reply(f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {', '.join(map(str, admin_ids))}")
        #await bot.send_message(message.from_user.id, f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {', '.join(map(str, admin_ids))}")
	except Exception as e:
		await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

#--------------------------------------------–ü–æ–¥–ø–∏—Å—á–∏–∫–∏-----------------------------------------------------------

# –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
#@dp.message_handler(commands=['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'])
async def cm_subscribers(message:types.Message):
	if message.from_user.id in admin_ids:
		try:
			read = await sqlite_db.sql_read_name_clients()
			n = 0
			for ret in read:
				n += 1
			await bot.send_message(message.from_user.id, f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ : {n}", reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', callback_data=f'subscribes')))
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤ cm_subscribers: {e}")
			await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö ‚ö†Ô∏è")

#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('subscribes'))
async def send_subscribes(call: types.CallbackQuery):
	try:
		await call.answer()
		read = await sqlite_db.sql_read_name_clients()
		response_message = ""

		for ret in read:
			response_message += f"–ò–º—è : {ret[1]}\n–¢–µ–ª–µ—Ñ–æ–Ω : {ret[2]}\n\n"

		if response_message: 

			# –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
			parts = [response_message[i:i + 4096] for i in range(0, len(response_message), 4096)]

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
			for part in parts:
				await bot.send_message(call.message.chat.id, part)

		else:
			await bot.send_message(call.message.chat.id, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!")
	except Exception as e:
		print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_subscribes: {e}")

#----------------------------------------------–ù–∞–∑–∞–¥--------------------------------------------------------------

# –ù–∞–∑–∞–¥
#@dp.message_handler(commands=['–ù–∞–∑–∞–¥'])
async def cm_back(message:types.Message):
	if message.from_user.id in admin_ids:
		await bot.send_message(message.from_user.id, '...', reply_markup=admin_kb.button_case_newsletter) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏

#--------------------------------------–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é------------------------------------------------------

# –ù–∞–∑–∞–¥
#@dp.message_handler(commands=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ_–º–µ–Ω—é'])
async def cm_smenu(message:types.Message):
	if message.from_user.id in admin_ids:
		await bot.send_message(message.from_user.id, '...', reply_markup=client_kb.button_case_menu) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏

#--------------------------------------------–ê–∫—Ü–∏–∏----------------------------------------------------------------

# –ú–µ–Ω—é –∞–∫—Ü–∏–π
#@dp.message_handler(commands=['–ê–∫—Ü–∏–∏'])
async def cm_promotion(message:types.Message):
	if message.from_user.id in admin_ids:
		await bot.send_message(message.from_user.id, '...', reply_markup=admin_kb.button_case_add_newsletter) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏

#--------------------------------------------–ú–æ–∏ –∞–∫—Ü–∏–∏ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏------------------------------------------

#@dp.message_handler(commands='–ú–æ–∏_–∞–∫—Ü–∏–∏')
async def cm_my_promotion(message: types.Message):
	if message.from_user.id in admin_ids:
		try:
			read = await sqlite_db.sql_read_promotion()
			if read:
				for ret in read:
                                   
					await bot.send_photo(message.from_user.id, ret[2], f'**–ù–∞–∑–≤–∞–Ω–∏–µ: {ret[1]}**\n{ret[3]}', reply_markup=admin_kb.get_admin_keyboard(ret[0]))
			else:
				await message.answer("–ê–∫—Ü–∏–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤ cm_my_promotion: {e}")		

#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('send '))
#@dp.callback_query_handler(lambda x: x.data and (x.data.startswith('send ') or x.data.startswith('confirSend ') or x.data.startswith('cancelSend ')))
async def send_promotions(call: types.CallbackQuery):
	#id_clients = {ret[0] for ret in read}
	#for client in id_clients:
	if call.data.startswith('send '):
		promo_id = call.data.replace('send ', '').strip()

		# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		await call.message.edit_reply_markup(reply_markup=admin_kb.get_admin_send(promo_id))

	elif call.data.startswith('confirmSend '):

		try:
        	# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
			read = await sqlite_db.sql_read_name_clients()
        
        	# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∏
			promo_id = call.data.replace('confirmSend ', '').strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–±—ç–∫–∞
			promotion = await sqlite_db.sql_send_command_promotion(promo_id)

			# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			await call.message.edit_reply_markup(reply_markup=admin_kb.get_admin_keyboard(promo_id))
        
        	# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ –∞–∫—Ü–∏—é
			if promotion:

            	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				success_count = 0
				error_count = 0
				for ret in read:
					try:
						await bot.send_photo(ret[0], promotion[1], promotion[2])  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
						success_count += 1
						await asyncio.sleep(0.5)
					except Exception as e:
						error_count += 1     	
						#print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {ret[0]}: {e}")  # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
				print(f"üìä –†–∞—Å—Å—ã–ª–∫–∞: {success_count} ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {error_count} ‚ùå –æ—à–∏–±–æ–∫")
				await bot.answer_callback_query(call.id, f"–ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ !", show_alert=True)
			else:
				await bot.answer_callback_query(call.id, f"–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ !", show_alert=True)

		except Exception as e:	
			await bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–∫—Ü–∏–π !", show_alert=True)


	elif call.data.startswith('cancelSend '):
		promo_id = call.data.replace('cancelSend ', '').strip() #–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–±—ç–∫–∞

		# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		await call.message.edit_reply_markup(reply_markup=admin_kb.get_admin_keyboard(promo_id))

		await call.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)

#@dp.callback_query_handler(lambda x: x.data and (x.data.startswith('del ') or x.data.startswith('confirmRemove ') or x.data.startswith('cancelRemove ')))
async def remove_promotions(call: types.CallbackQuery):
	if call.data.startswith('del '):
		promo_id = call.data.replace('del ', '').strip()

		# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		await call.message.edit_reply_markup(admin_kb.get_admin_remove(promo_id))

	elif call.data.startswith('confirmRemove '):
		promo_id = call.data.replace('confirmRemove ', '').strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–±—ç–∫–∞
		try:
			await sqlite_db.sql_del_command_promotion(promo_id)  # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			await call.answer(f"–ê–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ !", show_alert=True)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ)
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏ {promo_id}: {e}")
	elif call.data.startswith('cancelRemove '):
		promo_id = call.data.replace('cancelRemove ', '').strip() #–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–±—ç–∫–∞

		# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		await call.message.edit_reply_markup(reply_markup=admin_kb.get_admin_keyboard(promo_id))
		await call.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=True)

#---------------------------------–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–π---------------------------------------------

class FSMAdminPromotion(StatesGroup):
	name = State()
	img = State()
	description = State()

# –ö–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#@dp.message_handler(commands=['admin'])
async def get_admins(message: types.Message):
	global admin_ids
	chat_id = message.chat.id
	try:
		admins = await bot.get_chat_administrators(chat_id)
		admin_ids = [admin.user.id for admin in admins]
		await bot.send_message(message.from_user.id, '–ß—Ç–æ –Ω–∞–¥–æ —Ö–æ–∑—è–∏–Ω ?', reply_markup=admin_kb.button_case_newsletter) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
		await message.delete()
        #await message.reply(f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {', '.join(map(str, admin_ids))}")
        #await bot.send_message(message.from_user.id, f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {', '.join(map(str, admin_ids))}")
	except Exception as e:
		await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
#@dp.message_handler(commands='–î–æ–±–∞–≤–∏—Ç—å_–∞–∫—Ü–∏—é', state=None)
async def cm_add_promotion(message: types.Message):
	if message.from_user.id in admin_ids:
		await FSMAdminPromotion.name.set()
		await message.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏', reply_markup=admin_kb.button_case_cancel)

#–õ–æ–≤–∏–º 1-—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
#@dp.message_handler(state=FSMAdminPromotion.name)
async def load_name_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids: # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdminPromotion.next()
		await message.reply('–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ', reply_markup=admin_kb.button_case_cancel)

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#@dp.message_handler (state="*", commands= '–û—Ç–º–µ–Ω–∏—Ç—å')
#@dp.message_handler (Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids: # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		current_state = await state.get_state()
		if current_state is None:
			return
		await state.finish()
		await message.reply('–û—Ç–º–µ–Ω–∏–ª', reply_markup=admin_kb.button_case_newsletter)

#–õ–æ–≤–∏–º 2-–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
#@dp.message_handler(content_types=['photo'], state=FSMAdminPromotion.img)
async def load_img_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids: # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		async with state.proxy() as data:
			data['img'] = message.photo[0].file_id
		await FSMAdminPromotion.next()
		await message.reply("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏")

#–õ–æ–≤–∏–º 3-–∏–π –æ—Ç–≤–µ—Ç 
#@dp.message_handler(state=FSMAdminPromotion.description)
async def load_description_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids:  # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		async with state.proxy() as data:
			data['description'] = message.text
			total_length = len(data['name']) + len(data['description'])
			diff = total_length - 1000
			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤
			if total_length > 1000: # 1011 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ
				await message.reply(
					f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —É–±–µ—Ä–∏ {diff} —Å–∏–º–≤–æ–ª–∞"
				)
				return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
		try:
			await sqlite_db.sql_add_command_promotion(state)
			await bot.send_message(message.from_user.id, '–ê–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=admin_kb.button_case_newsletter)
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏: {e}")
		
		await state.finish()

#--------------------------------------------–£—Å–ª—É–≥–∏----------------------------------------------------------------

# –ú–µ–Ω—é –∞–∫—Ü–∏–π
#@dp.message_handler(commands=['–£—Å–ª—É–≥–∏'])
async def cm_services(message:types.Message):
	if message.from_user.id in admin_ids:
		await bot.send_message(message.from_user.id, '...', reply_markup=admin_kb.button_case_add_services) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏

#--------------------------------------------–ú–æ–∏ —É—Å–ª—É–≥–∏ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏------------------------------------------

#@dp.message_handler(commands='–ú–æ–∏_—É—Å–ª—É–≥–∏')
async def cm_my_services(message: types.Message):
	if message.from_user.id in admin_ids:
		try:
			read = await sqlite_db.sql_read_services()
			if read:
				for ret in read:
					await bot.send_photo(message.from_user.id, ret[2], f'{ret[1]}', reply_markup=admin_kb.get_admin_keyboard_services(ret[0]))
			else:
				await message.answer("–£—Å–ª—É–≥–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –≤ cm_my_services: {e}")

#@dp.callback_query_handler(lambda x: x.data and (x.data.startswith('del ') or x.data.startswith('confirmRemove ') or x.data.startswith('cancelRemove ')))
async def remove_services(call: types.CallbackQuery):
	if call.data.startswith('delServices '):
		services_id = call.data.replace('delServices ', '').strip()

		# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		await call.message.edit_reply_markup(admin_kb.get_admin_remove_services(services_id))

	elif call.data.startswith('confirmRemoveServices '):
		services_id = call.data.replace('confirmRemoveServices ', '').strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–±—ç–∫–∞
		try:	
			await sqlite_db.sql_del_command_services(services_id)  # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			await call.answer(f"–£—Å–ª—É–≥–∞ —É–¥–∞–ª–µ–Ω–∞ !", show_alert=True)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ)
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ {services_id}: {e}")
	
	elif call.data.startswith('cancelRemoveServices '):
		services_id = call.data.replace('cancelRemoveServices ', '').strip() #–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –∏–∑ –∫–æ–ª–±—ç–∫–∞

		# –ó–¥–µ—Å—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_reply_markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		await call.message.edit_reply_markup(reply_markup=admin_kb.get_admin_keyboard_services(services_id))
		await call.answer("–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", show_alert=True)


#---------------------------------–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥---------------------------------------------

class FSMAdminServices(StatesGroup):
	name = State()
	img = State()

# –ö–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
#@dp.message_handler(commands=['admin'])
async def get_admins(message: types.Message):
	global admin_ids
	chat_id = message.chat.id
	try:
		admins = await bot.get_chat_administrators(chat_id)
		admin_ids = [admin.user.id for admin in admins]
		await bot.send_message(message.from_user.id, '–ß—Ç–æ –Ω–∞–¥–æ —Ö–æ–∑—è–∏–Ω ?', reply_markup=admin_kb.button_case_newsletter) # –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
		await message.delete()
        #await message.reply(f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {', '.join(map(str, admin_ids))}")
        #await bot.send_message(message.from_user.id, f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {', '.join(map(str, admin_ids))}")
	except Exception as e:
		await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
#@dp.message_handler(commands='–î–æ–±–∞–≤–∏—Ç—å_—É—Å–ª—É–≥—É', state=None)
async def cm_add_services(message: types.Message):
	if message.from_user.id in admin_ids:
		await FSMAdminServices.name.set()
		await message.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏', reply_markup=admin_kb.button_case_cancel)

#–õ–æ–≤–∏–º 1-—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
#@dp.message_handler(state=FSMAdminServices.name)
async def load_name_services(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids: # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdminServices.next()
		await message.reply('–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ', reply_markup=admin_kb.button_case_cancel)

#–í—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#@dp.message_handler (state="*", commands= '–û—Ç–º–µ–Ω–∏—Ç—å')
#@dp.message_handler (Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids: # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		current_state = await state.get_state()
		if current_state is None:
			return
		await state.finish()
		await message.reply('–û—Ç–º–µ–Ω–∏–ª', reply_markup=admin_kb.button_case_newsletter)

#–õ–æ–≤–∏–º 2-–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
#@dp.message_handler(content_types=['photo'], state=FSMAdminServices.img)
async def load_img_services(message: types.Message, state: FSMContext):
	if message.from_user.id in admin_ids: # –°–≤—è–∑—å —Å –∞–¥–∏–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
		try:
			async with state.proxy() as data:
				data['img'] = message.photo[0].file_id
			await sqlite_db.sql_add_command_services(state)
			await bot.send_message(message.from_user.id, '–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=admin_kb.button_case_newsletter)
		except Exception as e:
			print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")

		await state.finish()

#--------------------------------------------–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤------------------------------------------
def register_handlers_admin(dp:Dispatcher):

#----------------------------------–ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞---------------------------------
	dp.register_message_handler(get_admins, commands=['admin'], is_chat_admin=True)

	dp.register_message_handler(cm_subscribers, commands=['–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'])
	dp.register_callback_query_handler(send_subscribes, lambda x: x.data and x.data.startswith('subscribes'))
	dp.register_message_handler(cm_smenu, commands=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ_–º–µ–Ω—é'])
	dp.register_message_handler(cm_back, commands=['–ù–∞–∑–∞–¥'])

#--------------------------------------------–ê–∫—Ü–∏–∏------------------------------------------
	dp.register_message_handler(cm_promotion, commands=['–ê–∫—Ü–∏–∏'])
	dp.register_message_handler(cm_my_promotion, commands=['–ú–æ–∏_–∞–∫—Ü–∏–∏'])

	dp.register_callback_query_handler(send_promotions, lambda x: x.data and (x.data.startswith('send ') or x.data.startswith('confirmSend ') or x.data.startswith('cancelSend ')))
	dp.register_callback_query_handler(remove_promotions, lambda x: x.data and (x.data.startswith('del ') or x.data.startswith('confirmRemove ') or x.data.startswith('cancelRemove ')))                                   
	dp.register_message_handler(cancel_handler, state="*", commands='–û—Ç–º–µ–Ω–∏—Ç—å')
	dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å', ignore_case=True), state="*")


#------------------------------------------–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é-----------------------------------------------------------
	dp.register_message_handler(cm_add_promotion, commands='–î–æ–±–∞–≤–∏—Ç—å_–∞–∫—Ü–∏—é', state=None)
	dp.register_message_handler(load_name_promotion, state=FSMAdminPromotion.name)
	dp.register_message_handler(load_img_promotion, content_types=['photo'], state=FSMAdminPromotion.img)
	dp.register_message_handler(load_description_promotion, state=FSMAdminPromotion.description)

#--------------------------------------------–£—Å–ª—É–≥–∏------------------------------------------
	dp.register_message_handler(cm_services, commands=['–£—Å–ª—É–≥–∏'])
	dp.register_message_handler(cm_my_services, commands=['–ú–æ–∏_—É—Å–ª—É–≥–∏'])

	#dp.register_callback_query_handler(send_services, lambda x: x.data and (x.data.startswith('send ') or x.data.startswith('confirmSend ') or x.data.startswith('cancelSend ')))
	dp.register_callback_query_handler(remove_services, lambda x: x.data and (x.data.startswith('delServices ') or x.data.startswith('confirmRemoveServices ') or x.data.startswith('cancelRemoveServices ')))                                   

#------------------------------------------–ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É-----------------------------------------------------------
	dp.register_message_handler(cm_add_services, commands='–î–æ–±–∞–≤–∏—Ç—å_—É—Å–ª—É–≥—É', state=None)
	dp.register_message_handler(load_name_services, state=FSMAdminServices.name)
	dp.register_message_handler(load_img_services, content_types=['photo'], state=FSMAdminServices.img)
