from aiogram.dispatcher import FSMContext # –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
from aiogram.dispatcher.filters.state import State, StatesGroup # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#from keyboards.client_kb import kb_phone # –≠—Ç–æ —Å __init__.py
from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import client_kb
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from data_base import sqlite_db
from data import data_db
from aiogram.dispatcher.filters import Text
from aiogram_calendar_rus import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar
from scheduler.scheduler_options import BirthdayService

from aiogram.types.web_app_info import WebAppInfo

import json # –ü—Ä–æ–±–Ω–∏–∫

#def get_client_location_services(services_id):
	#keyboard = InlineKeyboardMarkup()
	#keyboard.add(InlineKeyboardButton(f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'confirmRemoveServices {services_id}'))
	#keyboard.add(InlineKeyboardButton(f'–û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancelRemoveServices {services_id}'))
	#return keyboard

#@dp.message_handler(commands=['start', 'help'])
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def command_start(message:types.Message):

	#await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è !')            
	#await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è !', reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ', callback_data=f'tips')))
	await bot.send_message(
	message.from_user.id,
	'''–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å "–í–º—è—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç" ! 

–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –≤—ã–±–∏—Ä–∞—Ç—å —É—Å–ª—É–≥—É –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. 

–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å :
üìç –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è : –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å–ª—É–≥–∞–º.
üìç –ù–∞—à–∏ –∞–∫—Ü–∏–∏ : –£–∑–Ω–∞–π—Ç–µ –æ –Ω–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å!
üìç –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º : –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º!''',
	reply_markup=client_kb.b_auth
)
	await message.delete()

#----------------------------------------------------------------------------------------------------------------

#@dp.message_handler(content_types=['web_app_data']) 
async def web_authorization(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App —Ñ–æ—Ä–º—ã"""
    
    print(f"=== –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ò–ó WEB APP ===")
    print(f"User ID: {message.from_user.id}")
    print(f"WebApp data: {message.web_app_data}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_data = message.web_app_data
        data_json = web_app_data.data
        
        print(f"Raw JSON data: {data_json}")
        
        # –ü–∞—Ä—Å–∏–º JSON
        form_data = json.loads(data_json)
        
        print(f"Parsed form data: {form_data}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        last_name = form_data.get('lastName', '')
        first_name = form_data.get('firstName', '')
        middle_name = form_data.get('middleName', '')
        phone = form_data.get('phone', '')
        birth_date = form_data.get('birthDate', '')
        telegram_id = form_data.get('telegramId') or message.from_user.id
        
        print(f"Extracted data - Name: {last_name} {first_name}, Phone: {phone}, Birth: {birth_date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not all([last_name, first_name, phone, birth_date]):
            await message.answer("‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        full_name = f"{last_name} {first_name} {middle_name}".strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        if await sqlite_db.is_user_subscribed_clients(telegram_id):
            await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! ‚úÖ", reply_markup=client_kb.button_case_menu)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'user_id': telegram_id,
                'username': full_name,
                'phone': phone,
                'birth_date': birth_date
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            await sqlite_db.sql_add_command_clients(user_data)
            
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! ‚úÖ", reply_markup=client_kb.button_case_menu)
        
    except json.JSONDecodeError as e:
        print(f"JSON decode error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        print(f"General error: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

#--------------------------------------------–ù–∞—à–∏ –∞–∫—Ü–∏–∏------------------------------------------------------------

#@dp.message_handler(lambda message:'–ù–∞—à–∏ –∞–∫—Ü–∏–∏' in message.text)            
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def c_promo(message:types.Message):  
    try:
        read = await sqlite_db.sql_read_promotion()
        if read:  
            for ret in read:
                try:
                    await bot.send_photo(message.from_user.id, ret[2], f'\n{ret[3]}')
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ü–∏–π: {e}")
        else:
            await message.answer("–ê–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üì≠")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ü–∏–π: {e}")

#@dp.message_handler(lambda message:'–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' in message.text)            
async def c_admin(message:types.Message):                            
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç:", reply_markup=client_kb.get_client_chat())

#@dp.message_handler(lambda message:'–û –∫–æ–º–ø–∞–Ω–∏–∏' in message.text)            
async def c_company(message:types.Message):  
    await message.answer("""
üè¢ *–û –ö–û–ú–ü–ê–ù–ò–ò*

üìç *–ê–¥—Ä–µ—Å:*
                      
—É–ª. –†–æ–∑—ã –õ—é–∫—Å–µ–º–±—É—Ä–≥, 133           
–ò—Ä–∫—É—Ç—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 5 —Å—Ç3

üïí *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*
                      
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞: 9:00 - 18:00
‚Ä¢ –°—É–±–±–æ—Ç–∞: 10:00 - 16:00
‚Ä¢ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: –≤—ã—Ö–æ–¥–Ω–æ–π
        """)

#await bot.send_photo(message.from_user.id, ret[2], reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'{ret[1]}', callback_data=f'services {ret[0]}')))
#--------------------------------------------–ù–∞—à–∏ —É—Å–ª—É–≥–∏------------------------------------------------------------

#@dp.message_handler(lambda message:'–ù–∞—à–∏ —É—Å–ª—É–≥–∏' in message.text)            
async def c_services(message:types.Message):   
    try:
        await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ —É—Å–ª—É–≥—É:")                                      
        read = await sqlite_db.sql_read_services()

        if read:
            for ret in read:
                try:
                    # ret[0] - pid, ret[1] - name, ret[2] - img
                    await bot.send_photo(message.from_user.id, ret[2], reply_markup=InlineKeyboardMarkup(row_width=1)
								 .add(InlineKeyboardButton(text=f'{ret[1]}', callback_data=f'services {ret[0]}')))
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ª—É–≥–∏: {e}")

        else:
            await message.answer("–£—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üì≠")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥: {e}")

#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('services '))
async def location_services(call: types.CallbackQuery):
    try:
        if call.data.startswith('services '):
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ callback –ø–æ—Å–ª–µ –ø—Ä–æ–µ–ª–∞ (—Ç–∞–º –Ω–∞–∑–≤–∞–Ω–∏–µ)
            service_pid = call.data.split(' ')[1]
        
            await call.message.edit_reply_markup(reply_markup=client_kb.get_location_services(service_pid))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ location_services: {e}")

#@dp.callback_query_handler(lambda x: x.data and (x.data.startswith('locationI ') or x.data.startswith('locationR ') or x.data.startswith('back_to_service ')))
async def chat_services(call: types.CallbackQuery):
    try:
        if call.data.startswith('locationI '):
            service_pid = call.data.split(' ')[1]
            await call.message.edit_reply_markup(reply_markup=client_kb.get_client_chat2(service_pid))

        
        elif call.data.startswith('locationR '):
            service_pid = call.data.split(' ')[1]
            await call.message.edit_reply_markup(reply_markup=client_kb.get_client_chat2(service_pid))
        
        elif call.data.startswith('back_to_service '):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∞–¥—Ä–µ—Å–∞–º
            service_pid = call.data.split(' ')[1]
        
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î –ø–æ pid
            service_data = await sqlite_db.sql_send_command_services(service_pid)
            if service_data:
                service_name = service_data[0]  # name –∏–∑ –ë–î
            
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —Å —Ç–æ–π –∂–µ —É—Å–ª—É–≥–æ–π
                await call.message.edit_reply_markup(
                    reply_markup=InlineKeyboardMarkup(row_width=1).add(
                        InlineKeyboardButton(text=service_name, callback_data=f'services {service_pid}')
                    )
                )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat_services: {e}")
#-----------------------------------------------------------------------------------------------------------
#–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ —Ñ–æ—Ä–º–µ –∑–∞–ø–∏—Å–∏ yclients –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
#-----------------------------------------------------------------------------------------------------------

#@dp.message_handler(commands=['test_scheduler'])
async def test_scheduler_command(message: types.Message):
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤—Ä—É—á–Ω—É—é"""
    from scheduler.scheduler_options import BirthdayService
    service = BirthdayService(bot, dp)
    await service.daily_birthday_check()
    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

def register_handlers_client(dp:Dispatcher):
	dp.register_message_handler(command_start, commands=['start', 'help'])
	dp.register_message_handler(web_authorization, content_types=['web_app_data']) 


	dp.register_message_handler(c_promo, lambda message:'–ù–∞—à–∏ –∞–∫—Ü–∏–∏' in message.text)
	dp.register_message_handler(c_services, lambda message:'–ù–∞—à–∏ —É—Å–ª—É–≥–∏' in message.text)
	
	dp.register_callback_query_handler(location_services, lambda x: x.data and x.data.startswith('services '))
	dp.register_callback_query_handler(chat_services, lambda x: x.data and (x.data.startswith('locationI ') or x.data.startswith('locationR ') or x.data.startswith('back_to_service ')))

	dp.register_message_handler(c_admin, lambda message:'–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' in message.text)
	dp.register_message_handler(c_company, lambda message:'–û –∫–æ–º–ø–∞–Ω–∏–∏' in message.text)

	dp.register_message_handler(test_scheduler_command, commands=['test_scheduler'])