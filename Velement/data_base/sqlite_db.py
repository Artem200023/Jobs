import sqlite3 as sq
from create_bot import bot
from datetime import datetime, date

#--------------------------------------–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤------------------------------------------

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    connection = sq.connect('clients.db', check_same_thread=False)
    return connection

def sql_clients():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ)"""
    connection = get_db_connection()
    cursor = connection.cursor()
    
    cursor.execute('''CREATE TABLE IF NOT EXISTS users(
        user_id INTEGER PRIMARY KEY, 
        username TEXT, 
        phone TEXT, 
        birth_date TEXT
    )''')
    connection.commit()
    connection.close()
    print('Data base clients connected OK!')
#---------------------------------------------------------------------------------------------
async def sql_add_command_clients(user_data):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ web-—Ñ–æ—Ä–º—ã"""
    connection = get_db_connection()
    cursor = connection.cursor()
    
    try:
        values = (
            int(user_data['user_id']),
            user_data['username'],
            user_data['phone'], 
            user_data['birth_date']
        )
        cursor.execute('INSERT INTO users VALUES (?, ?, ?, ?)', values)
        connection.commit()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    finally:
        connection.close()
#---------------------------------------------------------------------------------------------
async def is_user_subscribed_clients(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    connection = get_db_connection()
    cursor = connection.cursor()
    
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone() is not None
    
    connection.close()
    return result

async def sql_read_name_clients():
    """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    connection = get_db_connection()
    cursor = connection.cursor()
    
    result = cursor.execute('SELECT * FROM users').fetchall()
    connection.close()
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
async def get_todays_birthdays():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤ (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    today = date.today()
    
    connection = get_db_connection()
    cursor = connection.cursor()
    
    cursor.execute('SELECT user_id, username, birth_date FROM users')
    all_users = cursor.fetchall()
    
    birthdays_today = []
    for user in all_users:
        user_id, username, birth_date_str = user
        if birth_date_str:
            try:
                #if '-' in birth_date_str:
                birth_date = datetime.strptime(birth_date_str, "%Y-%m-%d").date()
                
                if birth_date.month == today.month and birth_date.day == today.day:
                    birthdays_today.append((user_id, username, birth_date_str))
                    print(f"üéÇ –ù–∞–π–¥–µ–Ω –∏–º–µ–Ω–∏–Ω–Ω–∏–∫: {username} - {birth_date_str}")
            except ValueError as e:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {birth_date_str} - –û—à–∏–±–∫–∞: {e}")
                continue
    
    connection.close()
    print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤: {len(birthdays_today)}")
    return birthdays_today

#--------------------------------------–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ü–∏–π------------------------------------------
def get_promotion_connection():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å promotions –ë–î (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    connection = sq.connect('promotions.db', check_same_thread=False)
    return connection

def sql_newsletter():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã promotions"""
    connection = get_promotion_connection()
    cursor = connection.cursor()


    cursor.execute('CREATE TABLE IF NOT EXISTS promotions(pid INTEGER PRIMARY KEY AUTOINCREMENT ,name TEXT, img TEXT, description TEXT)')
    connection.commit()
    connection.close()
    print('Data base promotions connected OK!')

async def sql_send_command_promotion(data):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ü–∏—é –ø–æ ID"""
    connection = get_promotion_connection()
    cursor = connection.cursor()
    try:
        cursor.execute('SELECT name, img, description FROM promotions WHERE pid = ?', (data,))
        promotion = cursor.fetchone()
        return promotion
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–∏ {data}: {e}")
        return None
    finally:
        connection.close()
          
# –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é
async def sql_add_command_promotion(state):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é"""
    connection = get_promotion_connection()
    cursor = connection.cursor()
    try:
        async with state.proxy() as data:
            # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
            cursor.execute('INSERT INTO promotions (name, img, description) VALUES (?, ?, ?)', 
                              (data['name'], data['img'], data['description'])) 
            connection.commit()
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏: {e}")
        return False
    finally:
        connection.close()
# –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏–∏
async def sql_read_text_promotion(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ü–∏–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ"""
    connection = get_promotion_connection()
    cursor = connection.cursor()
    try:
        for ret in cursor.execute('SELECT * FROM promotions').fetchall():
            await bot.send_photo(message.from_user.id, ret[2], f'–û–ø–∏—Å–∞–Ω–∏–µ: {ret[3]}')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–∫—Ü–∏–π: {e}")
    finally:
        connection.close()
# –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏–∏
async def sql_read_promotion():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏"""
    connection = get_promotion_connection()
    cursor = connection.cursor()
    try:
        return cursor.execute('SELECT * FROM promotions').fetchall()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–∫—Ü–∏–π: {e}")
        return []
    finally:
        connection.close()
# –£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é
async def sql_del_command_promotion(data):
     
    """–£–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é"""
    connection = get_promotion_connection()
    cursor = connection.cursor()
    try:   
        cursor.execute('DELETE FROM promotions WHERE pid == ?', (data,))
        connection.commit()
        print(f"‚úÖ –ê–∫—Ü–∏—è {data} —É–¥–∞–ª–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏ {data}: {e}")
        return False
    finally:
        connection.close()
#--------------------------------------–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å–ª—É–≥------------------------------------------
def get_services_connection():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å services –ë–î (–ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
    connection = sq.connect('services.db', check_same_thread=False)
    return connection

def sql_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã services"""
    connection = get_services_connection()
    cursor = connection.cursor()

    cursor.execute('CREATE TABLE IF NOT EXISTS services(pid INTEGER PRIMARY KEY AUTOINCREMENT ,name TEXT, img TEXT)')
    connection.commit()
    connection.close()
    print('Data base services connected OK!')

async def sql_send_command_services(data):
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É –ø–æ ID"""
    connection = get_services_connection()
    cursor = connection.cursor()
    try:
        cursor.execute('SELECT name, img FROM services WHERE pid = ?', (data,))
        services = cursor.fetchone()
        return services
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ {data}: {e}")
        return None
    finally:
        connection.close()

# –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É
async def sql_add_command_services(state):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ü–∏—é"""
    connection = get_services_connection()
    cursor = connection.cursor()
    try:
        async with state.proxy() as data:
            # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å
            cursor.execute('INSERT INTO services (name, img) VALUES (?, ?)', 
                              (data['name'], data['img'])) 
            connection.commit()
            print(f"‚úÖ –£—Å–ª—É–≥–∞ '{data['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        return False
    finally:
        connection.close()

# –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥
async def sql_read_text_services(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    connection = get_services_connection()
    cursor = connection.cursor()
    try:
        for ret in cursor.execute('SELECT * FROM services').fetchall():
            await bot.send_photo(message.from_user.id, ret[2], f'{ret[1]}')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ª—É–≥: {e}")
    finally:
        connection.close()
# –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥
async def sql_read_services():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏"""
    connection = get_services_connection()
    cursor = connection.cursor()
    try:
        return cursor.execute('SELECT * FROM services').fetchall()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —É—Å–ª—É–≥: {e}")
        return []
    finally:
        connection.close()
# –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É
async def sql_del_command_services(data):
    """–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É"""
    connection = get_services_connection()
    cursor = connection.cursor()
    try:
        cursor.execute('DELETE FROM services WHERE pid == ?', (data,))
        connection.commit()
        print(f"‚úÖ –£—Å–ª—É–≥–∞ {data} —É–¥–∞–ª–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ {data}: {e}")
        return False
    finally:
        connection.close()


