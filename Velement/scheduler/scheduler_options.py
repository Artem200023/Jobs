import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
from data_base import sqlite_db

class BirthdayService:
    def __init__(self, bot, dp):
        self.bot = bot
        self.dp = dp
        self.scheduler = AsyncIOScheduler()
    
    async def send_birthday_congratulations(self, user_id, username):
        try:
            message = f"üéâ –î–æ—Ä–æ–≥–æ–π(–∞—è) {username}!\n\n–° –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ"
            await self.bot.send_message(user_id, message)
            print(f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {username}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {username}: {e}")
            return False
    
    async def daily_birthday_check(self):
        try:
            print(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –≤ {datetime.now().strftime('%H:%M:%S')}")
            try:
                birthdays = await sqlite_db.get_todays_birthdays()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
                return           

            if birthdays:
                print(f"üéÇ –ù–∞–π–¥–µ–Ω–æ {len(birthdays)} –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è...")
                for user_id, username, birth_date in birthdays:
                    await self.send_birthday_congratulations(user_id, username)
                    await asyncio.sleep(1)
            else:
                print("üì≠ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ daily_birthday_check: {e}")

    def setup_scheduler(self):
        try:
            # ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ü–†–û–í–ï–†–ö–£
            if self.scheduler.running:
                print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
                return
        
            # ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ó–ê–î–ê–ß
            existing_jobs = self.scheduler.get_jobs()
            if existing_jobs:
                print(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {[job.id for job in existing_jobs]}")
                return
        
            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.add_job(
                self.daily_birthday_check,
                CronTrigger(hour=22, minute=34),
                id='morning_birthday_check'
            )
        
            self.scheduler.add_job(
                self.daily_birthday_check,
                CronTrigger(hour=22, minute=35),
                id='afternoon_birthday_check'
            )
        
            self.scheduler.add_job(
                self.daily_birthday_check,
                CronTrigger(hour=22, minute=36),
                id='evening_birthday_check'
            )
        
            # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.scheduler.start()
            print("üöÄ APScheduler –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤ 21:32, 21:33, 22:08")
        
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

def setup_birthday_scheduler(bot, dp):
    service = BirthdayService(bot, dp)
    service.setup_scheduler()
    return service