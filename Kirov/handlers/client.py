#from aiogram.dispatcher import FSMContext # –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
#from aiogram.dispatcher.filters.state import State, StatesGroup # –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#from keyboards.client_kb import kb_phone # –≠—Ç–æ —Å __init__.py
from aiogram import types, Dispatcher
from create_bot import dp, bot
from keyboards import client_kb
from aiogram.types import ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from data_base import sqlite_db
from data import data_db
from aiogram.dispatcher.filters import Text

import json # –ü—Ä–æ–±–Ω–∏–∫

#@dp.message_handler(commands=['start', 'help'])
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def command_start(message:types.Message):

	#await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è !')            
	#await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è !', reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text=f'–û—Å—Ç–∞–≤–∏—Ç—å —á–∞–µ–≤—ã–µ', callback_data=f'tips')))
	await bot.send_message(
	message.from_user.id,
	'''–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø –ö–ò–†–û–í! 

–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö. ‚úÇÔ∏è

–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å :
üìç –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è : –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å–ª—É–≥–∞–º.
üìç –ù–∞—à–∏ –∞–∫—Ü–∏–∏ : –£–∑–Ω–∞–π—Ç–µ –æ –Ω–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –∞–∫—Ü–∏—è—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å!
üìç –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º : –£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏–º!
üìç –û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å : –í –Ω–∞—à–µ–º Telegram-–±–æ—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ú—ã –≥–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à –æ–±—Ä–∞–∑ —Å—Ç–∏–ª—å–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º! üíà''',
	reply_markup=client_kb.b_phone
)
	await message.delete()

#----------------------------------------------------------------------------------------------------------------
#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('tips'))
async def tips(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id) # –ß—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ –º–∏–≥–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    #await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏–≤–µ—Ç")
    await call.message.answer("–ü—Ä–∏–≤–µ—Ç")
#----------------------------------------------------------------------------------------------------------------

#@dp.message_handler(content_types=[types.ContentType.CONTACT])
async def log_in(message: types.Message):
		user_id = message.from_user.id
		username = message.from_user.username
		phone = message.contact.phone_number

		if await sqlite_db.is_phone_subscribed_clients(phone):
			await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã !", reply_markup=client_kb.button_case_menu) 
		else:
			await sqlite_db.sql_add_command_clients(user_id, username, phone)
			await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã !", reply_markup=client_kb.button_case_menu)

#@dp.message_handler(lambda message:'–ù–∞—à–∏ –∞–∫—Ü–∏–∏' in message.text)            
# –ü–æ –≤—ã–∑–æ–≤—É –∫–æ–º–∞–Ω–¥ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def c_promo(message:types.Message):                                         
		read = await sqlite_db.sql_read_promotion()
		for ret in read:

			await bot.send_photo(message.from_user.id, ret[2], f'\n{ret[3]}')
			
#@dp.message_handler(lambda message:'–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' in message.text)            
async def c_admin(message:types.Message):                                         
	await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç:", reply_markup=client_kb.get_client_chat())
	
#----------------------------------------------------------------------------------------------------------------
			
#-----------------------------------------------------------------------------------------------------------
#–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ —Ñ–æ—Ä–º–µ –∑–∞–ø–∏—Å–∏ yclients –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
#-----------------------------------------------------------------------------------------------------------

def register_handlers_client(dp:Dispatcher):
	dp.register_message_handler(command_start, commands=['start', 'help'])
	dp.register_callback_query_handler(tips, lambda x: x.data and x.data.startswith('tips'))
	dp.register_message_handler(log_in, content_types=[types.ContentType.CONTACT])

	dp.register_message_handler(c_promo, lambda message:'–ù–∞—à–∏ –∞–∫—Ü–∏–∏' in message.text)
	dp.register_message_handler(c_admin, lambda message:'–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' in message.text)

