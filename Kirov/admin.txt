from aiogram.dispatcher import FSMContext # Машина состояний
from aiogram.dispatcher.filters.state import State, StatesGroup # Машина состояний
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from data_base import sqlite_db # База данных
from keyboards import admin_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

ID = 1123330844

# Меню акций
#@dp.message_handler(commands=['Акции'])
async def cm_promotion(message:types.Message):
	if message.from_user.id == ID: # Связь с адиминистратором
		await bot.send_message(message.from_user.id, '...', reply_markup=admin_kb.button_case_add_newsletter) # Другой способ добавления кнопки

#--------------------------------------------Мои акции с инлайн кнопками------------------------------------------

#@dp.message_handler(commands='Мои_акции')
async def cm_my_promotion(message: types.Message):
	if message.from_user.id == ID:
		read = await sqlite_db.sql_read_promotion()
		for ret in read:                                       
			await bot.send_photo(message.from_user.id, ret[1], f'Название: {ret[0]}\n{ret[2]}', reply_markup=InlineKeyboardMarkup().\
				add(InlineKeyboardButton(f'Рассылка {ret[0]}', callback_data=f'send {ret[0]}')).add(InlineKeyboardButton(f'Удалить {ret[0]}', callback_data=f'del {ret[0]}')))

#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('send '))
async def send_promotions(call: types.CallbackQuery):
	#id_clients = {ret[0] for ret in read}
	#for client in id_clients:
	try:
        # Получаем список клиентов
		read = await sqlite_db.sql_read_name_clients()
        
        # Получаем информацию оpromotion
		promotion_send = call.data.replace('send ', '').strip()
		promotion = await sqlite_db.sql_send_command_promotion(promotion_send)
        
        # Проверяем, нашли ли акцию
		if promotion:
            # Объявляем переменные, если акция найдена
			#img, description = promotion[0], promotion[1]  # Предполагая, что вы получаете их из акции

            # Отправляем сообщение каждому пользователю
			for ret in read:
				try:
					await bot.send_photo(ret[0], promotion[0], promotion[1])  # Отправка сообщения
				except Exception as e:	
					print(f"Не удалось отправить сообщение пользователю {ret[0]}: {e}")  # Ошибка, если пользователь заблокировал бота
			await bot.answer_callback_query(call.id, f"Акция '{promotion_send}' успешно отправлена !", show_alert=True)
		else:
			await bot.answer_callback_query(call.id, f"Акция '{promotion_send}' не найдена !", show_alert=True)
			print("Акция не найдена !")

	except Exception as e:	
		await bot.answer_callback_query(call.id, "Произошла ошибка при отправке акций !", show_alert=True)
		print(f"Ошибка при отправке акций: {e}")  # Общая ошибка

#@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def remove_promotions(call: types.CallbackQuery):
	promotion_del = call.data.replace('del ', '').strip()
	await sqlite_db.sql_del_command_promotion(promotion_del)
	await call.answer(f"Акция '{promotion_del}' удалена !", show_alert=True)
	await call.message.delete()


#---------------------------------Машина состояний для добавления акций---------------------------------------------

class FSMAdminPromotion(StatesGroup):
	name = State()
	photo = State()
	description = State()

# Код для управления ботом администратором
#@dp.message_handler(commands=['admin'])
async def make_changes_command(message:types.Message):
	#global ID
	if message.from_user.id == ID: # Связь с адиминистратором
		await bot.send_message(message.from_user.id, 'Что надо хозяин ?', reply_markup=admin_kb.button_case_newsletter) # Другой способ добавления кнопки
		await message.delete()
	else :
		await bot.send_message(message.from_user.id, 'Ты не мой хозяин !')

# Начало диалога загрузки нового пункта меню
#@dp.message_handler(commands='Добавить_акцию', state=None)
async def cm_add_promotion(message: types.Message):
	if message.from_user.id == ID: # Связь с адиминистратором
		await FSMAdminPromotion.name.set()
		await message.reply('Введи название акции', reply_markup=admin_kb.button_case_cancel)

#Ловим 1-ый ответ от пользователя и пишем в словарь
#@dp.message_handler(state=FSMAdminPromotion.name)
async def load_name_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id == ID: # Связь с адиминистратором
		async with state.proxy() as data:
			data['name'] = message.text
		await FSMAdminPromotion.next()
		await message.reply('Загрузи фото', reply_markup=admin_kb.button_case_cancel)

#Выход из состояний
#@dp.message_handler (state="*", commands= 'Отменить')
#@dp.message_handler (Text(equals='Отменить', ignore_case=True), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
	if message.from_user.id == ID: # Связь с адиминистратором
		current_state = await state.get_state()
		if current_state is None:
			return
		await state.finish()
		await message.reply('Отменил', reply_markup=admin_kb.button_case_newsletter)

#Ловим 2-ой ответ от пользователя и пишем в словарь
#@dp.message_handler(content_types=['photo'], state=FSMAdminPromotion.photo)
async def load_photo_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id == ID: # Связь с адиминистратором
		async with state.proxy() as data:
			data['photo'] = message.photo[0].file_id
		await FSMAdminPromotion.next()
		await message.reply("Введи описание акции")

#Ловим 3-ий ответ
#@dp.message_handler(state=FSMAdminPromotion.description)
async def load_description_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id == ID: # Связь с адиминистратором
		async with state.proxy() as data:
			data['description'] = message.text
	
	await sqlite_db.sql_add_command_promotion(state)
	await bot.send_message(message.from_user.id, 'Акция добавлена !', reply_markup=admin_kb.button_case_newsletter)
	await state.finish()

#--------------------------------------------Регистрация хендлеров------------------------------------------
def register_handlers_admin(dp:Dispatcher):
	dp.register_message_handler(cm_promotion, commands=['Акции'])
	dp.register_message_handler(cm_my_promotion, commands=['Мои_акции'])
	dp.register_callback_query_handler(send_promotions, lambda x: x.data and x.data.startswith('send '))
	dp.register_callback_query_handler(remove_promotions ,lambda x: x.data and x.data.startswith('del '))
	dp.register_message_handler(make_changes_command, commands=['admin'])
	dp.register_message_handler(cancel_handler, state="*", commands='Отменить')
	dp.register_message_handler(cancel_handler, Text(equals='Отменить', ignore_case=True), state="*")
	#------------------------------------------Машина состояний добавить акцию-----------------------------------------------------------
	dp.register_message_handler(cm_add_promotion, commands='Добавить_акцию', state=None)
	dp.register_message_handler(load_name_promotion, state=FSMAdminPromotion.name)
	dp.register_message_handler(load_photo_promotion, content_types=['photo'], state=FSMAdminPromotion.photo)
	dp.register_message_handler(load_description_promotion, state=FSMAdminPromotion.description)


async def remove_promotions(call: types.CallbackQuery):
	promo_name = call.data.replace('del ', '').strip() # Получаем название акции из колбэка
	call.message.promo_name = promo_name
	if call.data.startswith('del '):

		# Создаем новые кнопки для подтверждения удаления
		keyboard = InlineKeyboardMarkup()
		keyboard.add(InlineKeyboardButton("Подтвердить", callback_data=f'confirm {promo_name}'))
		keyboard.add(InlineKeyboardButton("Отменить", callback_data=f'cancel {promo_name}'))

		# Здесь мы используем edit_message_reply_markup для изменения клавиатуры
		await call.message.edit_reply_markup(reply_markup=keyboard)

	elif call.data.startswith('confirm '):
		await sqlite_db.sql_del_command_promotion(promo_name)  # Выполняем удаление из базы данных
		await call.answer(f"Акция '{promo_name}' удалена!", show_alert=True)  # Уведомление пользователю
		await call.message.delete()  # Удаляем сообщение (если это нужно)

	elif call.data == 'cancel ':
		#promo_name = call.data.replace('cancel ', '').strip() Получаем название акции из колбэка
		promo_name = getattr(call.message, 'promo_name', None)
		keyboard1 = InlineKeyboardMarkup()
		keyboard1.add(InlineKeyboardButton(f'Рассылка {promo_name}', callback_data=f'send {promo_name}'))
		keyboard1.add(InlineKeyboardButton(f'Удалить {promo_name}', callback_data=f'del {promo_name}'))

		# Здесь мы используем edit_message_reply_markup для изменения клавиатуры
		await call.message.edit_reply_markup(reply_markup=keyboard1)

		await call.answer("Удаление акции отменено.", show_alert=True)



#Ловим 3-ий ответ
#@dp.message_handler(state=FSMAdminPromotion.description)
async def load_description_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id == ID: # Связь с адиминистратором
		async with state.proxy() as data:
			data['description'] = message.text
			if len({data['name']}) + len({data['description']}) > 1024:
				diff = len({data['name']}) + len({data['description']}) - 1024
				await message.answer("Ограничение символов в телеграмме, убери {diff} символа")
				await FSMClient.previous()
			else :
				await sqlite_db.sql_add_command_promotion(state)
				await bot.send_message(message.from_user.id, 'Акция добавлена !', reply_markup=admin_kb.button_case_newsletter)
		#await state.finish()


#Ловим 3-ий ответ
#@dp.message_handler(state=FSMAdminPromotion.description)
async def load_description_promotion(message: types.Message, state: FSMContext):
	if message.from_user.id == ID: # Связь с адиминистратором
		async with state.proxy() as data:
			data['description'] = message.text
	
	await sqlite_db.sql_add_command_promotion(state)
	await bot.send_message(message.from_user.id, 'Акция добавлена !', reply_markup=admin_kb.button_case_newsletter)
	await state.finish()


#@dp.message_handler(commands=['admin'])
async def get_admins(message: types.Message):
	chat_id = message.chat.id
	try:
		admins = await bot.get_chat_administrators(chat_id)
		admin_ids = [admin.user.id for admin in admins]
		await bot.send_message(message.from_user.id, 'Что надо хозяин ?', reply_markup=admin_kb.button_case_newsletter) # Другой способ добавления кнопки
		await message.delete()
        #await message.reply(f"ID администраторов: {', '.join(map(str, admin_ids))}")
        #await bot.send_message(message.from_user.id, f"ID администраторов: {', '.join(map(str, admin_ids))}")
	except Exception as e:
		await message.reply(f"Произошла ошибка: {e}")

if message.from_user.id in admin_ids: